name: Delete JFrog Artifactory Repository

on:
  issues:
    types: [opened, labeled]

env:
  JFROG_URL: "https://mgmresorts.jfrog.io"

jobs:
  delete-artifactory-repo:
    if: |
      contains(github.event.issue.title, '[Delete Artifactory Repo]') &&
      (contains(join(github.event.issue.labels.*.name, ','), 'delete-jfrog-repo'))
    runs-on: ubuntu-latest

    steps:
      - name: Parse issue body
        id: parse-issue-body
        uses: stefanbuck/github-issue-parser@v3

      - name: Extract repository name
        id: extract-repo
        run: |
          REPO_NAME=$(echo '${{ steps.parse-issue-body.outputs.jsonString }}' | jq -r '.repository_name')
          if [[ -z "$REPO_NAME" || "$REPO_NAME" == "null" ]]; then
            echo "Repository name not found in issue body."
            exit 1
          fi
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Update Issue Title
        uses: actions/github-script@v6
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
        with:
          script: |
            const repoName = process.env.REPO_NAME;
            const newTitle = `[Delete Artifactory Repo] Request for repository - ${repoName}`;
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: newTitle
            });

      - name: Comment on Issue Title Update
        uses: actions/github-script@v6
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
        with:
          script: |
            const repoName = process.env.REPO_NAME;
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const body = `
               ###  Issue Title Updated

               The issue title has been updated to: \`${repoName}\`.

                 [View this workflow run](${runUrl})
               `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Delete Artifactory Repository
        id: delete-repo
        env:
          JFROG_URL: ${{ env.JFROG_URL }}
          JFROG_USER: ${{ secrets.JFROG_ADMIN_USER }}
          JFROG_API_KEY: ${{ secrets.JFROG_ADMIN_API_KEY }}
          REPO_NAME: ${{ env.REPO_NAME }}
        run: |
          echo "Attempting to delete Artifactory repository: $REPO_NAME"
          STATUS=$(curl -s -o response.txt -w "%{http_code}" -u "$JFROG_USER:$JFROG_API_KEY" -X DELETE "$JFROG_URL/artifactory/api/repositories/$REPO_NAME")
          RESP=$(cat response.txt)
          echo "status_code=$STATUS" >> $GITHUB_OUTPUT
          echo "response=$RESP" >> $GITHUB_OUTPUT
          if [[ "$STATUS" == "200" ]]; then
            echo "Repository $REPO_NAME deleted successfully."
          else
            echo "Failed to delete repository. Status: $STATUS"
            exit 1
          fi

      - name: Comment on Issue with Result
        uses: actions/github-script@v6
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
        with:
          script: |
            const status = `${{ steps.delete-repo.outputs.status_code }}`
            const response = `${{ steps.delete-repo.outputs.response }}`
            const repoName = process.env.REPO_NAME
            let body = ''
            if (status === '200') {
              body = ` Successfully deleted repository: \`${repoName}\`.`
            } else {
              body = ` Failed to delete repository: \`${repoName}\`.\n\nStatus: \`${status}\`\nResponse: \`\`\`${response}\`\`\``
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
