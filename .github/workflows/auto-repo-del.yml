name: Auto Delete Repository with Existence Check

on:
  issues:
    types: [opened, labeled]

jobs:
  handle-repo-deletion:
    if: contains(github.event.issue.labels.*.name, 'repo-deletion')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write  # Needed to delete repos

    steps:
      - name: Parse issue body with parser
        id: parse
        uses: stefanbuck/github-issue-parser@v3

      - name: Debug parsed JSON
        run: |
          echo "Parser JSON output:"
          echo "${{ steps.parse.outputs.jsonString }}"

      - name: Extract form values
        id: extract
        run: |
          JSON='${{ steps.parse.outputs.jsonString }}'
          REPO_NAME=$(echo "$JSON" | jq -r '."Repository Name"')
          ORG_NAME=$(echo "$JSON" | jq -r '."Target Organization"')

          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "org_name=$ORG_NAME" >> $GITHUB_OUTPUT

          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ORG_NAME=$ORG_NAME" >> $GITHUB_ENV

      - name: Update Issue Title
        uses: actions/github-script@v6
        with:
          script: |
            const title = `[Repo Deletion] Request to delete ‚Äì ${process.env.REPO_NAME}`;
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title
            });

      - name: Comment on Title Update
        uses: actions/github-script@v6
        with:
          script: |
            const runUrl = `${github.server_url}/${github.repository}/actions/runs/${github.run_id}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üìù Issue title updated to reflect deletion request for \`${process.env.REPO_NAME}\`.\n\nüîó [View workflow run](${runUrl})`
            });

      - name: Check if repository exists
        id: check_repo
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          echo "üîç Checking if repository exists: ${ORG_NAME}/${REPO_NAME}"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GIT_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${ORG_NAME}/${REPO_NAME})

          echo "HTTP status: $RESPONSE"

          if [ "$RESPONSE" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete Repository
        if: steps.check_repo.outputs.exists == 'true'
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          echo "üóëÔ∏è Deleting repository: ${ORG_NAME}/${REPO_NAME}"
          curl -s -L -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GIT_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${ORG_NAME}/${REPO_NAME}

      - name: Comment on issue after deletion
        if: steps.check_repo.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          gh issue comment "${{ github.event.issue.number }}" \
            --repo "${{ github.repository }}" \
            --body "‚úÖ Repository \`${ORG_NAME}/${REPO_NAME}\` has been **deleted** successfully."

      - name: Comment if repository was not found
        if: steps.check_repo.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          gh issue comment "${{ github.event.issue.number }}" \
            --repo "${{ github.repository }}" \
            --body "‚ö†Ô∏è Repository \`${ORG_NAME}/${REPO_NAME}\` was **not found**. No deletion was performed."
